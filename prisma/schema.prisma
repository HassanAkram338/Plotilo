generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  passwordHash String
  name         String?
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tokenHash String // sha256(token)
  expiresAt DateTime
  createdAt DateTime @default(now())

  //Relation
  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])
}

model Organization {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String           @unique
  ownerId          String           @db.ObjectId
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  subscriptionPlan SubscriptionPlan @default(FREE)

  projects         Project[]
  memberships Membership[]

}

model Membership {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  role     OrgRole  @default(MEMBER)
  joinedAt DateTime @default(now())

  organizationId String       @db.ObjectId
  Organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
  @@index([organizationId])
}

model Invite {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String       @db.ObjectId
  email          String
  codeHash       String // sha256(code)
  status         InviteStatus @default(PENDING)
  expiresAt      DateTime
  createdAt      DateTime     @default(now())

  @@index([organizationId, email])
}

model Project {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  organizationId String        @db.ObjectId
  organization   Organization  @relation(fields: [organizationId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([organizationId])
}
